一  CAS原理 --Compare And Swap
解决的问题：在使用锁去锁住共享资源，不让数据出现混乱时若使用 synchronized这样的悲观锁，则会出现线程阻塞的问题。
  CAS则不加锁也能使多线程调用同一资源时不出现混乱
  1，从内存中读取value值。假设为10，我们把这个值称为A
  2,B=A+1得到b=11
  3,用A和内存的值相比，如果相等(就是说在过去的一段时候，没人修改内存的值),那就把B值写入内存，如果不相等（就是说过去的一段时间，有人修改了内存value的值）,意味着A已经
  不是最新值了，那就放弃这次修改，跳回第1不去
 compareAndSwap(内存的值,A，B)是一条硬件指令，保证原子执行
  注：在使用CAS时会出现一个ABA的问题，就是一个线程A读到内存值为10后被挂起，另一个线程B读到内存为10后将其改为11，后再将其改为10，线程A继续执行后使用CAS
  发现内存值并无修改的假象。如果内存值是简单的数字没什么问题，当是复杂对象时就会出问题。 
   处理方法：给每个放入AtomicReference的对象都加一个version

